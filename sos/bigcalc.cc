
#include "bignum/big.h"

#include <string>
#include <vector>
#include <cstdint>

#include "base/logging.h"
#include "bignum/big-overloads.h"
#include "ansi.h"

int main(int argc, char **argv) {
  ANSI::Init();

  BigInt b = 3434351749065975264943771943491401788608335359511493858595286317874764722912607518738309497284355476875878975878789600035378099228493955035292532063698182671373480950527235618634017852482358152273529901759704813315686533929866049756003136172331654656602410205267750083659696131075366100735036459715446458767926023812810882708660661478162435291120084952187216942477605633028104666430133839640050870935349141195081831259298353252838913229156006588585042804426535161394985269894489838019383029675642658566636601642249367928353338212710547505514231869319410006195478687862187248904453936323422576947575548987852918351177027388009341461816387435126817153934987098868901106889581037156977471916514227087860829152684217503231407680683895916816142925939958224510197308273863753057337176941195355620833805566470234318775634947293333394415145318047960901167812343133026451051934976937593906437380379015164821334034991935464465128756186496253502028454645490303959419454422054670175914793774941572042308356067580894014496749537515716367600462760672660775550599119740691805003262036288937172575542003731638283238526385153511877159892491019206099303680990926912160686322228099222909310978787868778673101592474739478974928540293107768184168089512057562536972145648926787357826313907965547860786675535944133912661046598918497897736130094343396249349644143238442602952576516246929841071692780819633839585914256954108686252509223392411698480327778758113743943440876635116437146078863398465424483994596694141977388221499991666611351161144201524810667212093881180447632725165670227133744345954087403620182059786892865110446700291223311602608639686449433930902942321401180089151635662147557291931570506836107977436106025511463521108018205946087214426435830757019572634217526934657165713455042668214804863058536600298953736520329343778115174831896694757681232380932680763811640040241091227036662600364334076333314167760747588022801634780594610575113513299209939519969555889182769998933463143433282955763605946638172910724922229864883283399081793479697589769339221359536613364860344173031300650308811434255847580818328085667723427920287386820662131441932660663272098470616891603635575161813485892496802574617110938924734652971064733103415136747688807175518980378499923944380712688773650584299400127956783644671067064252299427449588144145336863943586334044578960029339535249037891164792460528802738128373793253791593641135097969636110431130522406078982728108506148814840732671554797993013993797278673213573661769792102421871841550890871736592685272955259298149543300061830433149300756990716198755889272181558087433883126030210807377217365831374514498355755896531647546669714814014685890602304522379061280335259236983192662729875530567026500616049411264504448597823686699641439334187005119223110854540791270744358652283_b;
  BigInt c = 4376588118598226983143447105353373522888250484190756696571498615069005455056377876211508550240001335566014886941299029941512240923584238951383464595689628952514862276127344641387084596638331250729480687194838503913073921254447800877419335857725079009648131311913470982294170834725664851079909141596990247244740725190270128363654948578368672423357853256703181341246111387351096581120049892429228045231206990327386577206349965545517005077889538427682320979809839007862317162294842000661190971380771434133977262901615477214899973533252528959472988596739658711928228220458915278911778506406952851348637136328278818133102375323843976235910956765173992511205387598465572885447627802438384218003835335539956982418894201670616822243513606972576246633994103573589572507748113264611334651284965241802095823245314527712810561242449491182418153722445363929459806049800539940223678259431430214493147087030017372576329307445364740741157798082100432488254885099188245767048215643058049967307995333547868641974764919228747568274742078208656193283498355001436595257881337448892587210909280180109068671856101639648051749559865733158487992096690233271376525276058946003057834111917294497889980598409961570483963026396037153351429754244448151389375049873538021723717238982865149063345399236594423075226909282159464441082069965920744845387745058423452118146006599940646873299550542377309040628224516345193547753750612594254329994260493043031833849500631625001678962855549768980982440297530446435697507201028526704275885534513998609254830302003614811744717751247857991962020776204756922166689715758172125040919014368082204793941078817638798163513091023703307188718012825289541745931964082206246274064394367313548353630662657237875188902531190995707692274473531692914275188974344116245720421837095263755489700530876379170560091016192798485537639779851577525973725087096398321387380085323486575510847552766606437372226876790063130649629920830302627484910695081411748519760593851103366605299108336773182510318194305353420333314047447840470589291748579068202445893081078187894438139689918275741786277561832164243159175461821014815192804948506068311745540919058323110122218563079706958205395025333100143005923271858817666069498193163252390748352122795397301150799633988271209919253279629504029450839827509765137194854297713785898604424407502969289111854653727677174142749175672709864372679480460229014740480651151571813306924556145870764492977426713470135546602200134427432120869933981315432828938130365642494099268153293036471166626211067291290929381537798841156782778111673579041788842530753954573312719893271931838110190775801452106270420415995331367939639813375883675169304667938957320518708360845162456149614136569663975337943155919466252937018841309389650239012804709730809780263324181602841665131362716374134541083_b;

  BigInt bb = b * b;
  BigInt cc = c * c;

  BigInt res = 360721_b * bb - 222121_b * cc;

  CHECK(res == 138600_b);

  // c^2 = 360721 a^2 + 1
  // b^2 = 222121 a^2 + 1

  CHECK((cc - 1_b) % 360721_b == 0_b);
  CHECK((bb - 1_b) % 222121_b == 0_b);
  printf("divisible :)\n");

  BigInt a1 = (cc - 1_b) / 360721_b;
  BigInt a2 = (bb - 1_b) / 222121_b;

  CHECK(a1 == a2);
  const BigInt &aa = a1;

  // const BigInt aa = a * a;
  CHECK(360721_b * aa + 1_b == cc);
  CHECK(222121_b * aa + 1_b == bb);

  const BigInt a = BigInt::Sqrt(aa);
  CHECK(a * a == aa) << (a * a - aa).ToString();

  printf("%s\n",
         a.ToString().c_str());


  return 0;
}
